#include "utils.h"

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

void sourcelist_insert(SourcesSet* set, Source* source) {
    {
        SourcesListItem** cursor = &set->list.root;

        while (*cursor) {
            cursor = &(*cursor)->next;
        }

        (*cursor) = calloc(1, sizeof(SourcesListItem));

        (*cursor)->source = source;
        (*cursor)->next = NULL;
        set->list.size++;
    }


    {
        SourcesListItem** cursor = &set->list_class[source->class].root;

        while (*cursor) {
            cursor = &(*cursor)->next;
        }

        (*cursor) = calloc(1, sizeof(SourcesListItem));

        (*cursor)->source = source;
        (*cursor)->next = NULL;
        set->list_class[source->class].size++;
    }
}


void sourceslists_toarray(SourcesSet* set) {
    set->array.number = set->list.size;
    set->array._ = calloc(set->array.number, sizeof(Source*));

    {
        SourcesListItem* cursor = set->list.root;
        int32_t i = 0;
        while (cursor) {
            set->array._[i++] = cursor->source;
            cursor = cursor->next;
        }
    }


    for (int32_t cl = 0; cl < N_CLASSES; cl++) {
        set->array_class[cl].number = set->list_class[cl].size;
        set->array_class[cl]._ = calloc(set->array_class[cl].number, sizeof(Source*));

        SourcesListItem* cursor = set->list_class[cl].root;
        int32_t i = 0;
        while (cursor) {
            set->array_class[cl]._[i++] = cursor->source;
            cursor = cursor->next;
        }
    }
}


void set_insert(Int32Set* root, int32_t value) {
    Int32Set* cursor = root;

    while (cursor->next) {
        if (cursor->value == value) return;
        cursor = cursor->next;
    }

    cursor->value = value;
    cursor->next = calloc(1, sizeof(Int32Set));
    cursor->next->next = NULL;
}

int set_exists(Int32Set* root, int32_t value) {
    Int32Set* cursor = root;

    while (cursor->next) {
        if (cursor->value == value) return 1;
        cursor = cursor->next;
    }

    return 0;
}

int set_size(Int32Set* root) {
    int32_t size = 0;

    Int32Set* cursor = root;
    while (cursor->next) {
        size++;
    }

    return size;
}

HashMapItem* hash_push(HashMap* map, int32_t key) {
    HashMapItem** item = hash_get_ref(map, key);

    if ((*item) == NULL) {
        (*item) = calloc(1, sizeof(HashMapItem));
        (*item)->key = key;
        (*item)->trues = 0;
        (*item)->falses = 0;
        map->size++;
    }

    return *item;
}

HashMapItem* hash_get(HashMap* map, int32_t key) {
    HashMapItem* walker = map->root;

    while (walker) {
        if (walker->key == key) {
            return walker;
        }
        walker = walker->next;
    }

    return walker;
}

HashMapItem** hash_get_ref(HashMap* map, int32_t key) {
    HashMapItem** walker = &map->root;

    while ((*walker)) {
        if ((*walker)->key == key) {
            return walker;
        }
        walker = &(*walker)->next;
    }

    return walker;
}

void hash_increment(HashMap* map, int32_t key, int is_falses) {
    HashMapItem** cursor = &map->root;

    cursor = hash_get_ref(map, key);

    if ((*cursor) == NULL) {
        (*cursor) = calloc(1, sizeof(HashMapItem));
        (*cursor)->key = key;
        (*cursor)->trues = 0;
        (*cursor)->falses = 0;
    }

    if (is_falses) {
        (*cursor)->falses++;
    }
    else {
        (*cursor)->trues++;
    }
}

int32_t hash_infected(HashMap* map, enum Class cl) {
    HashMapItem* cursor = map->root;

    int32_t infected = 0;
    while (cursor->next) {

        if (cl == CLASS__NOT_INFECTED) {
            if (cursor->falses > 0) infected++;
        } else {
            if (cursor->trues > 0) infected++;
        }

        cursor = cursor->next;
    }

    return infected;
}

void hash_free(HashMap* map) {
    HashMapItem* cursor = map->root;
    HashMapItem* cursor_tofree = cursor;

    while (cursor->next) {
        cursor = cursor->next;
        free(cursor_tofree);
        cursor_tofree = cursor;
    }
    free(cursor);
    
}