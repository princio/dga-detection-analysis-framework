{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "from math import floor\n",
    "import math\n",
    "import pandas as pd\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import OneClassSVM\n",
    "from sklearn.metrics import confusion_matrix, classification_report, make_scorer\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_predict\n",
    "import numpy as np\n",
    "import common # type: ignore\n",
    "from sklearn.feature_selection import VarianceThreshold\n",
    "from mlxtend.feature_selection import SequentialFeatureSelector\n",
    "from IPython.display import display, Markdown, Latex, HTML\n",
    "import matplotlib.pyplot as plt\n",
    "from sqlalchemy import create_engine, text\n",
    "import quantiphy as qq\n",
    "import warnings\n",
    "import enum\n",
    "\n",
    "SEC_PER_SLOT = 12 * 60 * 60\n",
    "EPS_TH = 0.5\n",
    "DATASET = \"CTU-13\"\n",
    "database = common.Database()\n",
    "dataset = common.Dataset()\n",
    "slot = common.Slot(database, SEC_PER_SLOT, EPS_TH, DATASET)\n",
    "\n",
    "def dm(x):\n",
    "    display(Markdown(x))\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "TO_LATEX = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "LI = \"infected\"\n",
    "LNI = \"not-infected\"\n",
    "\n",
    "class Label(enum.Enum):\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        # super(Tables, self).__init__(*args)\n",
    "        pass\n",
    "    \n",
    "    def label(self):\n",
    "        if TO_LATEX:\n",
    "            return f\"@@label@:{self._}:@\"\n",
    "        else:\n",
    "            return f\"[{self._}]\"\n",
    "        pass\n",
    "        \n",
    "    def ref(self):\n",
    "        if TO_LATEX:\n",
    "            return f\"@@ref@:{self._}:@\"\n",
    "        else:\n",
    "            return f\"_[{self._}]_\"\n",
    "        pass\n",
    "\n",
    "class Tables(Label):\n",
    "    TOTAL_Q = 0\n",
    "    AVERAGE_Q = 1\n",
    "    Q_PER_S = 2\n",
    "    DURATION = 3\n",
    "\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        self.prefix = \"tab\"\n",
    "        self._ = self.name.lower().replace(\"_\", \"-\")\n",
    "        pass\n",
    "    pass\n",
    "\n",
    "class Figures(Label):\n",
    "    Q_PER_S = 0\n",
    "    DURATION = 1\n",
    "\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        self.prefix = \"fig\"\n",
    "        self._ = self.name.lower().replace(\"_\", \"-\")\n",
    "        pass\n",
    "    pass\n",
    "\n",
    "class Figure:\n",
    "    def __init__(self, fig, axs, label, caption):\n",
    "        self.fig = fig\n",
    "        self.axs = axs\n",
    "        self.label = label\n",
    "        self.caption = caption\n",
    "        pass\n",
    "\n",
    "    def show(self, ycaption=-0.1):\n",
    "        fname = f\"{self.label._}.{'pdf' if TO_LATEX else 'svg'}\"\n",
    "        if TO_LATEX is False:\n",
    "            self.fig.suptitle(self.label.label())\n",
    "            self.fig.text(.5, ycaption, self.caption, ha='center')\n",
    "            # self.fig.show()\n",
    "            self.fig.savefig(fname, bbox_inches=\"tight\")\n",
    "            dm(f\"![]({fname} \\\"Example\\\")\")\n",
    "        else:\n",
    "            self.fig.savefig(fname)\n",
    "            dm(f\"@@begin@:figure:@\")\n",
    "            dm(f\"@@centering\")\n",
    "            dm(f\"@@includegraphics@:{fname}:@\")\n",
    "            dm(self.label.label())\n",
    "            dm(f\"@@caption{{{self.caption}}}\")\n",
    "            dm(f\"@@end@:figure:@\")\n",
    "            pass\n",
    "        pass\n",
    "\n",
    "class Table:\n",
    "    def __init__(self, df, label, caption):\n",
    "        self.df = df.copy()\n",
    "        self.label = label\n",
    "        self.caption = caption\n",
    "        pass\n",
    "\n",
    "    def show(self, width=None):\n",
    "        if TO_LATEX is False:\n",
    "            self.show_md(width)\n",
    "        else:\n",
    "            self.show_latex()\n",
    "        return\n",
    "    \n",
    "    def show_md(self, width):\n",
    "        s = self.df.style\n",
    "        caption = f\"<i>{self.label.label()}</i>: {self.caption}\"\n",
    "        s = (\n",
    "            s.set_caption(caption)\n",
    "            .set_table_styles([\n",
    "                 dict(selector=\"caption\", props=\"caption-side: bottom; font-size:1em;\")\n",
    "             ], overwrite=False)\n",
    "        )\n",
    "        if width:\n",
    "            s = s.set_table_attributes(f'style=\"table-layout: auto; min-width: {width};\"')\n",
    "            pass\n",
    "        display(HTML(f'<div style=\"display: flex; justify-content: center;\">{s.to_html()}</div>'))\n",
    "        return\n",
    "\n",
    "    def show_latex(self):\n",
    "        dm(\"@@begin@:table:@\")\n",
    "        dm(self.df.to_markdown())\n",
    "        dm(self.label.label())\n",
    "        dm(f\"@@caption@:{self.caption}:@\")\n",
    "        dm(\"@@end@:table:@\")\n",
    "        return\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "\n",
    "def pp(rows):\n",
    "    if isinstance(rows, list):\n",
    "        dm(\"\\n\".join(rows))\n",
    "    else:\n",
    "        dm(rows)\n",
    "    pass\n",
    "\n",
    "def ptime(hours):\n",
    "    if hours < 1:\n",
    "        return qq.Quantity(hours * 60, units=\"min\").render(prec=1)\n",
    "    if hours < 24:\n",
    "        return qq.Quantity(hours, units=\"hr\").render(prec=1)\n",
    "    if hours >= 24:\n",
    "        return qq.Quantity(hours / 24, units=\"days\").render(prec=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1493733000.0 17288\n",
      "count    267095.000000\n",
      "mean         86.356296\n",
      "std        1171.467916\n",
      "min           0.000000\n",
      "50%           3.000000\n",
      "95%          24.000000\n",
      "99%          38.000000\n",
      "max       17288.000000\n",
      "Name: w_plot_end, dtype: float64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1493733000.0 17288\n",
      "17288\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "w_sec = 24 * 60 * 60\n",
    "df = dataset.df.copy().sort_values(\"time_s_end\")\n",
    "\n",
    "df = df#.iloc[0:1000]\n",
    "\n",
    "n_windows_max = math.floor(df[\"time_s_end\"].max() / w_sec)\n",
    "print(df[\"time_s_end\"].max(), n_windows_max)\n",
    "\n",
    "# df = df[df[\"time_s_end\"] < w_sec * 200]\n",
    "\n",
    "df[\"w_plot_end\"] =  np.floor(df[\"time_s_end\"] / w_sec)\n",
    "\n",
    "print(df[\"w_plot_end\"].describe(percentiles=[0.95, 0.99]))\n",
    "\n",
    "display(df[\"w_plot_end\"].hist())\n",
    "\n",
    "n_windows = math.floor(df[\"time_s_end\"].max() / w_sec)\n",
    "\n",
    "print(df[\"time_s_end\"].max(), n_windows)\n",
    "\n",
    "bins = np.zeros((n_windows, 2))\n",
    "print(math.floor(df[\"time_s_end\"].max() / w_sec))\n",
    "for row, window in df.iterrows():\n",
    "    bin_start = math.floor(window[\"time_s_start\"] / w_sec) # type: ignore\n",
    "    bin_end = math.floor(window[\"time_s_end\"] / w_sec) # type: ignore\n",
    "\n",
    "    bins[bin_start:bin_end, 0] += 1\n",
    "    bins[bin_start:bin_end, 1] += 1 if window[\"eps_NONE_0.500\"] > 0 else 0\n",
    "    pass\n",
    "\n",
    "dftmp = pd.DataFrame(bins, columns=[\"nw\", \"p\"])\n",
    "dftmp[\"nw\"] -= dftmp[\"p\"]\n",
    "dftmp.plot.bar(stacked=True, width=1)#log=False, sharex=True, stacked=True, histtype=\"step\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
