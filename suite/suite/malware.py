
from dataclasses import dataclass
import json
from pathlib import Path
import pandas as pd

from config import Config, ConfigPCAP

@dataclass
class Malware:
    id: int = -1
    name: str = ""
    family: str = ""
    sha256sum: str = ""
    pass


class Malwares:
    def __init__(self, config: Config) -> None:
        self.config = config
        self.df: pd.DataFrame = pd.read_sql("SELECT * FROM malware", config.sqlalchemyconnection)
        self.not_infected_id = 1
        pass

    def get_or_insert(self, pcapconfig: ConfigPCAP) -> Malware:
        malware = Malware()

        if not pcapconfig.infected:
            malware.id = 1
            malware.name = "not-infected"
            return malware

        cursor = self.config.psyconn.cursor()

        cursor.execute(
            """SELECT * FROM malware WHERE sha256 = %s""",
            (pcapconfig.malware.sha256,)
        )

        if cursor.rowcount == 0:
            cursor.execute(
                """
                INSERT INTO public.malware(
                    name, family, year, md5, sha256, "binary", dga)
                VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id;""",
                (
                    pcapconfig.malware.name,
                    pcapconfig.malware.family,
                    pcapconfig.malware.year,
                    pcapconfig.malware.md5,
                    pcapconfig.malware.sha256,
                    pcapconfig.malware.binary,
                    pcapconfig.malware.dga
                )
            )
        
        lastrow = cursor.fetchone()
        if lastrow is None or lastrow[0] == 0:
            raise Exception("Retrieved malware id is 0 something si wrong")
        malware.id = lastrow[0]

        return malware
    pass

    def pcap_dganess(self, pcap: pd.DataFrame):

        n_nx = (pcap.rcode == 3).sum()
        n = pcap.shape[0]

        pcap_uniques = pcap.drop_duplicates(subset='dn')

        pcap['nx'] = pcap.rcode == 3
        u_nx = pcap[['dn', 'nx']].groupby("dn").sum()

        u = pcap_uniques.shape[0]

        u_ratio = u_nx / u
        n_ratio = n_nx / n

        return (u_ratio + n_ratio) / 2